from http import HTTPStatus

from django.core.files.uploadedfile import SimpleUploadedFile
from django.test import Client, TestCase
from django.urls import reverse

from ..forms import CommentForm, PostForm
from ..models import Comment, Group, Post, User


class PostCreateFormTests(TestCase):
    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.user = User.objects.create_user(username='Moses')
        cls.group = Group.objects.create(
            slug='test-slug',
        )
        cls.new_group = Group.objects.create(
            slug='test-slug-new',
        )
        cls.post = Post.objects.create(
            author=cls.user,
            text='–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç',
        )
        cls.form = PostForm()
        cls.commit_form = CommentForm()
        cls.form_data = {'text': '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç',
                         'group': cls.group.id}

    def setUp(self):
        self.guest_client = Client()
        self.authorized_client = Client()
        self.authorized_client.force_login(PostCreateFormTests.user)

    def test_create_post(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ profile."""
        posts_count = Post.objects.count()
        response = self.authorized_client.post(
            reverse('posts:post_create'),
            data=self.form_data,
            follow=True,
        )
        self.assertRedirects(response, reverse('posts:profile', kwargs={
            'username': PostCreateFormTests.post.author.username}))
        self.assertEqual(Post.objects.count(), posts_count + 1)
        self.assertTrue(
            Post.objects.filter(
                text='–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç',
                group=PostCreateFormTests.group.id).first()
        )

    def test_post_edit(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ post_detail."""
        posts_count = Post.objects.count()
        form_data_edit = {
            "text": "–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç",
            'group': PostCreateFormTests.new_group.id,
        }
        response = self.authorized_client.post(
            reverse("posts:post_edit",
                    kwargs={
                        "post_id": PostCreateFormTests.post.pk}),
            data=form_data_edit)
        self.assertEqual(Post.objects.count(), posts_count)
        self.assertRedirects(response, reverse("posts:post_detail", kwargs={
            "post_id": PostCreateFormTests.post.pk}))
        self.assertTrue(Post.objects.filter(
            text="–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç",
            group=PostCreateFormTests.new_group.id,
        ).first())

    def test_guest_client_create_post(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞—Ç—å
        –ø–æ—Å—Ç –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        posts_count = Post.objects.count()
        response = self.guest_client.post(
            reverse('posts:post_create'),
            data=self.form_data,
            follow=True,
        )
        redirect = '/auth/login/' + '?next=' + reverse('posts:post_create')
        self.assertRedirects(response, redirect)
        self.assertEqual(Post.objects.count(), posts_count)

    def test_authorized_client_csn_create_comment(self):
        """
        –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –ë–î –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        comments_count = Comment.objects.count()
        response = self.authorized_client.post(
            reverse('posts:add_comment',
                    kwargs={'post_id': PostCreateFormTests.post.pk}),
            data=self.form_data,
            follow=True
        )
        self.assertRedirects(response, reverse(
            'posts:post_detail',
            kwargs={'post_id': PostCreateFormTests.post.pk}
        ))
        self.assertEqual(Comment.objects.count(), comments_count + 1)

    def test_guest_client_cant_create_comment(self):
        """
        –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –ø—ã—Ç–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –≥–æ—Å—Ç—å.
        """
        comments_count = Comment.objects.count()
        self.guest_client.post(
            reverse(
                'posts:post_detail',
                kwargs={'post_id': PostCreateFormTests.post.pk}
            ),
            data=self.form_data,
            follow=True
        )
        self.assertEqual(Comment.objects.count(), comments_count)

    def test_forms_help_text_post(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ help_text –∏–∑ –∫–ª–∞—Å—Å–∞ Meta model Post."""
        help_text_forms = PostCreateFormTests.form
        field_help_text = {
            'text': '–ü–∏—à–∏ –≤ –ø–æ–ª–µ –≤—ã—à–µ.',
            'group': '–ù–∞–∂–º–∏ –Ω–∞ —Ç–µ–∫—Å—Ç –≤—ã—à–µ –∏ –ø–æ—è–≤–∏—Ç—Å—è '
                     '—Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø.',
            'image': '–ó–∞–≥—Ä—É–∑–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –±—É–¥–µ—Ç —Å—á–∞—Å—Ç—å–µ.',
        }
        for field, expected_value in field_help_text.items():
            with self.subTest(field=field):
                self.assertEqual(
                    help_text_forms[field].help_text, expected_value)

    def test_forms_help_text_commit(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ help_text –∏–∑ –∫–ª–∞—Å—Å–∞ Meta model Commit."""
        help_text_forms = PostCreateFormTests.commit_form
        self.assertEqual(help_text_forms['text'].help_text,
                         '–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')

    def test_forms_empty_label(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ empty_label –∏ placeholder –∏–∑ –∫–ª–∞—Å—Å–∞ Meta."""
        group_label = PostCreateFormTests.form.fields['group'].empty_label
        placeholder = PostCreateFormTests.form.fields['text'].widget.attrs[
            'placeholder']
        placeholder_commit = PostCreateFormTests.commit_form.fields[
            'text'].widget.attrs['placeholder']
        fields = {
            f'{group_label}': '–ì—Ä—É–ø–ø–∞ —Å–∞–º–∞ —Å–µ–±—è –Ω–µ –≤—ã–±–µ—Ä–µ—Ç, '
                              '–¥–µ–π—Å—Ç–≤—É–π! üòé',
            f'{placeholder}': '–¢–µ–∫—Å—Ç —Ç–≤–æ–π –ø–æ—Ç—Ä–µ–±–µ–Ω, –º—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, '
                              '–Ω–µ —Ç—è–Ω–∏ —Å —ç—Ç–∏–º üòè',
            f'{placeholder_commit}': '–ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∏–∑–æ –≤—Å–µ—Ö —Å–∏–ª!',
        }
        for field, expected_value in fields.items():
            with self.subTest(field=field):
                self.assertEqual(field, expected_value)

    def test_photo_upload(self):
        """–ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∑–∞–ø–∏—Å—å –≤ –ë–î."""
        posts_count = Post.objects.count()
        small_gif = (
            b'\x47\x49\x46\x38\x39\x61\x02\x00'
            b'\x01\x00\x80\x00\x00\x00\x00\x00'
            b'\xFF\xFF\xFF\x21\xF9\x04\x00\x00'
            b'\x00\x00\x00\x2C\x00\x00\x00\x00'
            b'\x02\x00\x01\x00\x00\x02\x02\x0C'
            b'\x0A\x00\x3B'
        )
        uploaded = SimpleUploadedFile(
            name='small.gif',
            content=small_gif,
            content_type='image/gif'
        )
        form_data = {
            'text': '–ü–æ—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π',
            'group': PostCreateFormTests.group.id,
            'image': uploaded
        }
        response = self.authorized_client.post(
            reverse('posts:post_create'),
            data=form_data,
            follow=True,
        )
        self.assertEqual(response.status_code, HTTPStatus.OK)
        self.assertEqual(Post.objects.count(), posts_count + 1)
